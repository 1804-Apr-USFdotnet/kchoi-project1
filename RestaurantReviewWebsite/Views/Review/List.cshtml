@model PagedList.IPagedList<LibraryProject.Review>
@using PagedList.Mvc;

@{
    ViewBag.Title = "Reviews for ";
}

<p>
    @Html.ActionLink("Add New Review", "Create", new { id = ViewBag.RestaurantID } )
</p>
<table class="table">
    <tr>
        <th>
            Reviewer
        </th>
        <th>
            Rating
        </th>
        <th>
            Description
        </th>
        <th></th>
    </tr>
@if (Model.Count > 0) {
    @foreach (var item in Model)
    {
        <tr>
            <td>
                @(string.IsNullOrEmpty(ViewBag.ReviewerName) ? "Anonymous" : ViewBag.ReviewerName)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Rating)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Description)
            </td>
            <td>
                @Html.ActionLink("Edit", "Update", new { id = item.ID }) |
                @Html.ActionLink("Details", "Details", new { id = item.ID }) |
                @Html.ActionLink("Delete", "Delete", new { id = item.ID })
            </td>
        </tr>
    }
} else
{
    <tr>This restaurant has no reviews.</tr>
}

</table>

@Html.ActionLink("Return to Restaurant Details", "Details", "Restaurant", new { id = ViewBag.RestaurantID }, null)

<br />
Page @(Model.PageCount < Model.PageNumber ? 0 : Model.PageNumber) of @Model.PageCount
@ViewBag.CurrentSort
@Html.PagedListPager(Model, page => Url.Action("List",
    new { page, orderBy = ViewBag.CurrentSort, currentFilter = ViewBag.CurrentFilter }))
