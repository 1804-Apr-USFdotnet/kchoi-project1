@model LibraryProject.Restaurant

@{
    ViewBag.Title = "Edit Restaurant Details";
}

<h4>@ViewBag.ErrorMessage</h4>

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

<div class="form-horizontal">
    <h4>Restaurant</h4>
    <hr />
    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
    @Html.HiddenFor(model => model.ID)

    <div class="form-group">
        @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control", pattern = "^[A-Za-z 0-9]{0,50}$" } })
            @Html.ValidationMessageFor(model => model.Name, "Alphanumeric, 50 character limit", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.Address, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.Address, new { htmlAttributes = new { @class = "form-control", pattern = "^[A-Za-z 0-9]{0,50}$" } })
            @Html.ValidationMessageFor(model => model.Address, "Alphanumeric, 50 character limit", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.City, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.City, new { htmlAttributes = new { @class = "form-control", pattern = "^[A-Za-z 0-9]{0,50}$" } })
            @Html.ValidationMessageFor(model => model.City, "Alphanumeric, 50 character limit", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.State, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.State, new { htmlAttributes = new { @class = "form-control", pattern = "^[a-zA-Z]{2}$|^$" } })
            @Html.ValidationMessageFor(model => model.State, "ex. FL", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.ZIP, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.ZIP, new { htmlAttributes = new { @class = "form-control", pattern = @"^[0-9]{5}(?:-[0-9]{4})?$|^$" } })
            @Html.ValidationMessageFor(model => model.ZIP, "ex. 12345, 12345-7890", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.PhoneNum, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.PhoneNum, new { htmlAttributes = new { @class = "form-control", pattern = @"\(?\d{3}\)?-? *\d{3}-? *-?\d{4}|^$" } })
            @Html.ValidationMessageFor(model => model.PhoneNum, "ex. 123-456-7890, (123) 456-7890", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        <div class="col-md-offset-2 col-md-10">
            <input type="submit" value="Save" class="btn btn-default" />
            @Html.ActionLink("Cancel", "Index")
        </div>
    </div>
</div>
}
